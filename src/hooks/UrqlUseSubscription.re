/**
 * The handler type used to type the optional accumulator function
 * returned by useSubscription. handler is a GADT used to support
 * proper type inference for useSubscription.
 */
type handler('acc, 'resp, 'ret) =
  | Handler((option('acc), 'resp) => 'acc): handler('acc, 'resp, 'acc)
  | NoHandler: handler(_, 'resp, 'resp);

/* Arguments passed to useSubscription on the JavaScript side. */
[@bs.deriving abstract]
type useSubscriptionArgs = {
  query: string,
  [@bs.optional]
  variables: Js.Json.t,
};

[@bs.module "urql"]
external useSubscriptionJs:
  (useSubscriptionArgs, option((option('acc), Js.Json.t) => 'acc)) =>
  array(UrqlTypes.jsResponse('ret)) =
  "useSubscription";

/**
 * A function for converting the response to useQuery from the JavaScript
 * representation to a typed Reason record.
 */
let useSubscriptionResponseToRecord =
    (parse, result): UrqlTypes.hookResponse('response) => {
  let data =
    result->UrqlTypes.jsDataGet->Js.Nullable.toOption->Belt.Option.map(parse);
  let error =
    result
    ->UrqlTypes.jsErrorGet
    ->Belt.Option.map(UrqlCombinedError.combinedErrorToRecord);
  let fetching = result->UrqlTypes.fetchingGet;

  let response =
    switch (fetching, data, error) {
    | (true, None, _) => UrqlTypes.Fetching
    | (false, _, Some(error)) => Error(error)
    | (true, Some(data), _) => Data(data)
    | (false, Some(data), _) => Data(data)
    | (false, None, None) => NotFound
    };

  {fetching, data, error, response};
};

/**
 * The useSubscription hook.
 *
 * Accepts the following arguments:
 *
 * handler – an optional function to accumulate subscription responses.
 *
 * request – a tuple containing the query, a parse function for decoding the
 * JSON response, and a higher-order function that calls a passed-in function
 * with the variables corresponding to the GraphQL. This should be generated by
 * graphql_ppx_re and is accessible in the MyQuery.definition variable.
 */;
let useSubscription =
    (
      type acc,
      type resp,
      type ret,
      ~handler: handler(acc, resp, ret),
      (parse, query, composeVariables):
        UrqlTypes.graphqlDefinition(
          resp,
          UrqlTypes.hookResponse(ret),
          'rest,
        ),
    )
    : 'rest => {
  composeVariables(variables => {
    let args = useSubscriptionArgs(~query, ~variables, ());

    React.useMemo3(
      () => {
        let response: UrqlTypes.hookResponse(ret) =
          switch (handler) {
          | Handler(handlerFn) =>
            useSubscriptionJs(
              args,
              Some((acc, data) => handlerFn(acc, parse(data))),
            )[0]
            |> useSubscriptionResponseToRecord(x => x)
          | NoHandler =>
            useSubscriptionJs(args, None)[0]
            |> useSubscriptionResponseToRecord(parse)
          };

        response;
      },
      (handler, args, parse),
    );
  });
};
